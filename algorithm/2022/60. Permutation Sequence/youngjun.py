class Solution(object):
    def getPermutation(self, n, k):
    
    # n = 4인 배열이 있다고 가정해 보자.
    # 이때 배열들의 구조는 1 + {2,3,4}, 2 + {1,3,4}, 3 + {1,2,4}, 4 + {1,2,3} 으로 정리될 수 있다.
    # n!은 n * (n-1)!으로 정의될 수 있으며, 여기서 k(몇번째 수인지)에 따라 첫번째 자리가 정의된다.
    # 이를테면, 4! = 4 * (4-1)! = 4 * 6으로 정리할 수 있다. 이때 (4-1)!은 첫째 자리 수를 제외한 나머지 수의 모든 순열의 갯수이다.
    # 따라서, 첫번째 자리 수를 구하기 위해서는, k의 인덱스 수 // (n-1)!을 이용해, 두 수를 나눈 몫을 계산한 값을 이용할 수 있다. 
    # 또한 (n-1)! = (n-1) * (n-2)!이고, n! = n * (n-1) * (n-2) * ..... * 1 이므로, 이것을 활용하여 알고리즘을 만들 수 있다.
    
    output = ''
    
    num_list = [str(i) for i in range(1,n+1)]
    # 배열에 사용될 숫자 list를 만들어 준다.
    
    for i in range(n-1, -1, -1):
        devide = factorial(i)
        # 위에서 이야기했던 (n-1)!을 구함
        pos = (k-1)//devide
        # k의 인덱스 수와 (n-1)!을 나눈 몫을 구하여, 위에서 만든 숫자 list에서 몇 번째의 값이 첫째 자리 수인지 알아낸다.
        output += num_list[pos]
        # 이를 통해 숫자 list에서 첫째 자리 수를 구하여 output에 더한다.
        num_list.pop(pos)
        # 첫째 자리 수를 구했으니, 해당되는 값을 삭제한다.
        k %= devide
        # 남은 자리 수를 구하기 위해, k를 (n-1)!로 나눈 나머지를 구하고, 이를 새로운 k로 설정하여 계속 반복한다.
    
    return output
