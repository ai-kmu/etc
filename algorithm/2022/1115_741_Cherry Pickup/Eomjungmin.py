
class Solution:
    def cherryPickup(self, grid: List[List[int]]) -> int:
        l = len(grid)
        memo = {}

        def dfs(a1,b1,a2,b2):
            print("두 사람의 좌표 입력 a1,b1,a2,b2: ", a1,b1,a2,b2)
            # 갈 수 없는 곳이나 가는 곳이 grid index 벗어나면 음수로 큰값을 리턴
            if max(a1,b1,a2,b2) >= l or grid[a1][b1] == -1 or grid[a2][b2] == -1:
                return -10000

            # 두 사람 모두 목적지 (n-1,n-1) 위치에 도착하면 
            # grid[l-1][l-1] 리턴
            if a1 == l-1 and b1 == l-1 and a2 == l-1 and b2 == l-1:
                return grid[a1][b1]

             # 두 사람의 좌표 이미 방문한 경우는 저장한 것 리턴
            if (a1,b1,a2,b2) in memo:
                return memo[(a1,b1,a2,b2)]
       
            # 정답값
            res = 0 

            # 두 사람의 좌표가 같으면 중복해서 res에 더하지 않도록 함
            # 두 사람의 좌표가 같지 않으면 모두 더함
            if (a1,b1) == (a2,b2):
                res += grid[a1][b1]
            else:
                res += (grid[a1][b1] + grid[a2][b2])

            # 현재 입력 좌표에서 dfs를 이용하여 두 사람이 각각 하나씩 이동한 후
            # 현재 좌표에서 얻을 수 있는 열매의 최대 개수 계산
            print(f"({a1,b1,a2,b2})에서 dfs 계산")
            res += max(dfs(a1+1,b1,a2,b2+1), dfs(a1,b1+1,a2+1,b2), dfs(a1+1,b1,a2+1,b2), dfs(a1,b1+1,a2,b2+1))

            # 입력한 두 사람의 좌표의 결과를 저장
            memo[(a1,b1,a2,b2)] = res
            print("res: ", res)
            return res
        res = dfs(0,0,0,0)
        print("memo: ", memo)
        return res if res > 0 else 0

'''
* 참고: dfs의 입력에 따른 res 결과 출력 과정

두 사람의 좌표 입력 a1,b1,a2,b2:  0 0 0 0
((0, 0, 0, 0))에서 dfs 계산
두 사람의 좌표 입력 a1,b1,a2,b2:  1 0 0 1
((1, 0, 0, 1))에서 dfs 계산
두 사람의 좌표 입력 a1,b1,a2,b2:  2 0 0 2
두 사람의 좌표 입력 a1,b1,a2,b2:  1 1 1 1
((1, 1, 1, 1))에서 dfs 계산
두 사람의 좌표 입력 a1,b1,a2,b2:  2 1 1 2
두 사람의 좌표 입력 a1,b1,a2,b2:  1 2 2 1
두 사람의 좌표 입력 a1,b1,a2,b2:  2 1 2 1
((2, 1, 2, 1))에서 dfs 계산
두 사람의 좌표 입력 a1,b1,a2,b2:  3 1 2 2
두 사람의 좌표 입력 a1,b1,a2,b2:  2 2 3 1
두 사람의 좌표 입력 a1,b1,a2,b2:  3 1 3 1
두 사람의 좌표 입력 a1,b1,a2,b2:  2 2 2 2
res:  2
두 사람의 좌표 입력 a1,b1,a2,b2:  1 2 1 2
res:  2
두 사람의 좌표 입력 a1,b1,a2,b2:  2 0 1 1
((2, 0, 1, 1))에서 dfs 계산
두 사람의 좌표 입력 a1,b1,a2,b2:  3 0 1 2
두 사람의 좌표 입력 a1,b1,a2,b2:  2 1 2 1
두 사람의 좌표 입력 a1,b1,a2,b2:  3 0 2 1
두 사람의 좌표 입력 a1,b1,a2,b2:  2 1 1 2
res:  3
두 사람의 좌표 입력 a1,b1,a2,b2:  1 1 0 2
res:  5
두 사람의 좌표 입력 a1,b1,a2,b2:  0 1 1 0
((0, 1, 1, 0))에서 dfs 계산
두 사람의 좌표 입력 a1,b1,a2,b2:  1 1 1 1
두 사람의 좌표 입력 a1,b1,a2,b2:  0 2 2 0
두 사람의 좌표 입력 a1,b1,a2,b2:  1 1 2 0
((1, 1, 2, 0))에서 dfs 계산
두 사람의 좌표 입력 a1,b1,a2,b2:  2 1 2 1
두 사람의 좌표 입력 a1,b1,a2,b2:  1 2 3 0
두 사람의 좌표 입력 a1,b1,a2,b2:  2 1 3 0
두 사람의 좌표 입력 a1,b1,a2,b2:  1 2 2 1
res:  3
두 사람의 좌표 입력 a1,b1,a2,b2:  0 2 1 1
res:  5
두 사람의 좌표 입력 a1,b1,a2,b2:  1 0 1 0
((1, 0, 1, 0))에서 dfs 계산
두 사람의 좌표 입력 a1,b1,a2,b2:  2 0 1 1
두 사람의 좌표 입력 a1,b1,a2,b2:  1 1 2 0
두 사람의 좌표 입력 a1,b1,a2,b2:  2 0 2 0
((2, 0, 2, 0))에서 dfs 계산
두 사람의 좌표 입력 a1,b1,a2,b2:  3 0 2 1
두 사람의 좌표 입력 a1,b1,a2,b2:  2 1 3 0
두 사람의 좌표 입력 a1,b1,a2,b2:  3 0 3 0
두 사람의 좌표 입력 a1,b1,a2,b2:  2 1 2 1
res:  3
두 사람의 좌표 입력 a1,b1,a2,b2:  1 1 1 1
res:  4
두 사람의 좌표 입력 a1,b1,a2,b2:  0 1 0 1
((0, 1, 0, 1))에서 dfs 계산
두 사람의 좌표 입력 a1,b1,a2,b2:  1 1 0 2
두 사람의 좌표 입력 a1,b1,a2,b2:  0 2 1 1
두 사람의 좌표 입력 a1,b1,a2,b2:  1 1 1 1
두 사람의 좌표 입력 a1,b1,a2,b2:  0 2 0 2
res:  3
res:  5
memo:  {(2, 1, 2, 1): 2, (1, 1, 1, 1): 2, (2, 0, 1, 1): 3, (1, 0, 0, 1): 5, (1, 1, 2, 0): 3, (0, 1, 1, 0): 5, (2, 0, 2, 0): 3, (1, 0, 1, 0): 4, (0, 1, 0, 1): 3, (0, 0, 0, 0): 5}
'''

            
        
        
